<!-- BankTransferFlow BPEL Process [Generated by the Oracle BPEL Designer]  -->
<process name="BankTransferFlow" targetNamespace="http://samples.otn.com" suppressJoinFailure="yes" xmlns:tns="http://samples.otn.com" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:services="http://services.otn.com">
	<!-- ================================================================= -->
	<!-- PARTNERLINKS                                                      -->
	<!-- List of services participating in this BPEL process               -->
	<!-- ================================================================= -->
	<partnerLinks>
		<!--
        The 'client' role represents the requester of this service. It is 
        used for callback. The location and correlation information associated
        with the client role are automatically set using WS-Addressing.
        -->
		<partnerLink name="client" partnerLinkType="tns:BankTransferFlow" myRole="BankTransferFlowProvider"/>
		<partnerLink name="bankTransfer" partnerLinkType="tns:BankTransferService" partnerRole="BankTransferServiceProvider"/>
		<partnerLink name="transferService" partnerLinkType="services:TransferService" partnerRole="TransferServiceProvider"/>
	</partnerLinks>
	<!-- ================================================================= -->
	<!-- VARIABLES                                                         -->
	<!-- List of messages and XML documents used within this BPEL process  -->
	<!-- ================================================================= -->
	<variables>
		<!-- Reference to the message passed as input during initiation -->
		<variable name="input" messageType="tns:BankTransferFlowRequestMessage"/>
		<!-- Reference to the message that will be sent back to the 
             requester during callback
             -->
		<variable name="output" messageType="tns:BankTransferFlowResponseMessage"/>
		<variable name="fault" messageType="tns:BankTransferFlowFaultMessage"/>
		<variable messageType="tns:DebitRequestMessage" name="debitRequest"/>
		<variable messageType="tns:DebitResponseMessage" name="debitResponse"/>
		<variable messageType="tns:CreditRequestMessage" name="creditRequest"/>
		<variable messageType="tns:CreditResponseMessage" name="creditResponse"/>
		<variable messageType="services:DoTransferServiceRequestMessage" name="doTransferRequest"/>
		<variable messageType="services:DoTransferServiceResponseMessage" name="doTransferResponse"/>
		<variable messageType="services:UndoTransferServiceRequestMessage" name="undoTransferRequest"/>
		<variable messageType="services:UndoTransferServiceResponseMessage" name="undoTransferResponse"/>
	</variables>
	<!-- ================================================================= -->
	<!-- ORCHESTRATION LOGIC                                               -->
	<!-- Set of activities coordinating the flow of messages across the    -->
	<!-- services integrated within this business process                  -->
	<!-- ================================================================= -->
	<faultHandlers>
		<catch faultName="tns:NoAccountIdException">
			<sequence>
				<assign name="setFault">
					<copy>
						<from expression="string('NoAccountId')">
						</from>
						<to variable="fault" part="payload" query="/tns:BankTransferFlowFault"/>
					</copy>
				</assign>
				<reply partnerLink="client" portType="tns:BankTransferFlow" operation="process" variable="fault" faultName="tns:TransferFault" name="NoAccountIdError"/>
				<throw name="NoAccountIdException" faultName="tns:TransferFault"/>
			</sequence>
		</catch>
		<catch faultName="tns:NotEnoughBalanceException">
			<sequence>
				<assign name="setFault">
					<copy>
						<from expression="string('NotEnoughBalance')">
						</from>
						<to variable="fault" part="payload" query="/tns:BankTransferFlowFault"/>
					</copy>
				</assign>
				<reply partnerLink="client" portType="tns:BankTransferFlow" operation="process" variable="fault" faultName="tns:TransferFault" name="NotEnoughBalanceError"/>
				<throw name="NotEnoughBalanceException" faultName="tns:TransferFault"/>
			</sequence>
		</catch>
		<catchAll>
			<sequence>
				<assign name="setFault">
					<copy>
						<from expression="string('exception')">
						</from>
						<to variable="fault" part="payload" query="/tns:BankTransferFlowFault"/>
					</copy>
				</assign>
				<reply partnerLink="client" portType="tns:BankTransferFlow" operation="process" variable="fault" faultName="tns:TransferFault" name="systemError"/>
				<throw name="SystemException" faultName="tns:TransferFault"/>
			</sequence>
		</catchAll>
	</faultHandlers>
	<sequence>
		<scope name="main">
			<faultHandlers>
				<catch faultName="tns:NoAccountIdException">
					<compensate scope="transfer"/>
				</catch>
			</faultHandlers>
			<sequence>
				<receive name="receiveInput" partnerLink="client" portType="tns:BankTransferFlow" operation="process" variable="input" createInstance="yes"/>
				<assign name="setDebitRequest">
					<copy>
						<from variable="input" part="payload" query="/tns:BankTransferFlowRequest/tns:fromAccount">
						</from>
						<to variable="debitRequest" part="accountId"/>
					</copy>
					<copy>
						<from variable="input" part="payload" query="/tns:BankTransferFlowRequest/tns:amount">
						</from>
						<to variable="debitRequest" part="amount"/>
					</copy>
				</assign>
				<invoke name="invokeDebit" partnerLink="bankTransfer" portType="tns:BankTransferService" operation="debit" inputVariable="debitRequest" outputVariable="debitResponse"/>
				<scope name="transfer">
                                       <faultHandlers>
					<compensationHandler>
						<sequence>
							<assign name="assignUndoTransfer">
								<copy>
									<from variable="doTransferResponse" part="payload" query="/services:DoTransferServiceResponse/services:confirmId"></from>
									<to variable="undoTransferRequest" part="payload" query="/services:UndoTransferServiceRequest/services:confirmId"/>
								</copy>
							</assign>
							<invoke name="invokeCompensate" partnerLink="transferService" portType="services:TransferService" operation="undoTransfer" inputVariable="undoTransferRequest" outputVariable="undoTransferResponse"/>
						</sequence>
					</compensationHandler>
                                           </faultHandlers>
					<sequence>
						<assign name="assignTransferRequest">
							<copy>
								<from variable="input" part="payload" query="/tns:BankTransferFlowRequest/tns:fromAccount"></from>
								<to variable="doTransferRequest" part="payload" query="/services:DoTransferServiceRequest/services:fromAccount"/>
							</copy>
							<copy>
								<from variable="input" part="payload" query="/tns:BankTransferFlowRequest/tns:toAccount"></from>
								<to variable="doTransferRequest" part="payload" query="/services:DoTransferServiceRequest/services:toAccount"/>
							</copy>
							<copy>
								<from variable="input" part="payload" query="/tns:BankTransferFlowRequest/tns:amount">
								</from>
								<to variable="doTransferRequest" part="payload" query="/services:DoTransferServiceRequest/services:amount"/>
							</copy>
						</assign>
						<invoke name="invokeDoTransfer" partnerLink="transferService" portType="services:TransferService" operation="doTransfer" inputVariable="doTransferRequest" outputVariable="doTransferResponse"/>
					</sequence>
				</scope>
				<assign name="setCreditRequest">
					<copy>
						<from variable="input" part="payload" query="/tns:BankTransferFlowRequest/tns:toAccount">
						</from>
						<to variable="creditRequest" part="accountId"/>
					</copy>
					<copy>
						<from variable="input" part="payload" query="/tns:BankTransferFlowRequest/tns:amount">
						</from>
						<to variable="creditRequest" part="amount"/>
					</copy>
				</assign>
				<invoke name="invokeCredit" partnerLink="bankTransfer" portType="tns:BankTransferService" operation="credit" inputVariable="creditRequest" outputVariable="creditResponse"/>
				<assign name="setStatus">
					<copy>
						<from expression="string('success')">
						</from>
						<to variable="output" part="payload" query="/tns:BankTransferFlowResponse/tns:status"/>
					</copy>
				</assign>
				<reply name="reply" partnerLink="client" portType="tns:BankTransferFlow" operation="process" variable="output"/>
			</sequence>
		</scope>
	</sequence>
</process>
