<!-- InstanceManager BPEL Process [Generated by the BPEL Designer] -->
<process name="InstanceManager" targetNamespace="http://services.oracle.com/bpel/instance" 
    suppressJoinFailure="yes" xmlns:tns="http://services.oracle.com/bpel/instance" 
    xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
	<bpelx:exec import="org.w3c.dom.Element"/>
	<bpelx:exec import="com.oracle.bpel.client.IInstanceHandle"/>
	<bpelx:exec import="com.oracle.bpel.client.Locator"/>
	<bpelx:exec import="com.oracle.bpel.client.auth.DomainAuth"/>
	<bpelx:exec import="com.oracle.bpel.client.auth.DomainAuthFactory"/>
	<bpelx:exec import="com.oracle.bpel.client.util.SQLDefs"/>
	<bpelx:exec import="com.oracle.bpel.client.util.WhereCondition"/>
	<bpelx:exec import="com.oracle.services.bpel.instance.Instance"/>
	<bpelx:exec import="com.oracle.services.bpel.instance.InstanceFactory"/>
	<bpelx:exec import="com.oracle.services.bpel.instance.Instancelist"/>
	<bpelx:exec import="com.oracle.services.bpel.instance.InstancelistFactory"/>
	<bpelx:exec import="com.oracle.services.bpel.instance.InstanceResult"/>
	<bpelx:exec import="com.oracle.services.bpel.instance.InstanceResultFactory"/>
	<bpelx:exec import="com.oracle.services.bpel.instance.IWhereCondition"/>
	<bpelx:exec import="com.oracle.services.bpel.instance.WhereConditionFactory"/>
	<bpelx:exec import="org.collaxa.xml.IBaseFacade"/>
	<!-- ================================================================= -->
	<!-- PARTNERLINKS                                                      -->
	<!-- List of services participating in this BPEL process               -->
	<!-- ================================================================= -->
	<partnerLinks>
		<!-- The 'client' role represents the requester of this service. -->
		<partnerLink name="client" partnerLinkType="tns:InstanceManager" myRole="InstanceManagerProvider"/>
	</partnerLinks>
	<!-- ================================================================= -->
	<!-- VARIABLES                                                         -->
	<!-- List of messages and XML documents used within this BPEL process  -->
	<!-- ================================================================= -->
	<variables>
		<!-- Reference to the message passed as input during initiation -->
		<!--
          Reference to the message that will be returned to the requester
          -->
		<variable messageType="tns:lookupInstanceRequestMessage" name="lookupInstanceRequest"/>
		<variable name="lookupInstanceResponse" messageType="tns:lookupInstanceResponseMessage"/>
		<variable messageType="tns:listInstancesRequestMessage" name="listInstancesRequest"/>
		<variable name="listInstancesResponse" messageType="tns:listInstancesResponseMessage"/>
		<variable messageType="tns:getResultRequestMessage" name="getResultRequest"/>
		<variable name="getResultResponse" messageType="tns:getResultResponseMessage"/>
	</variables>
	<!-- ================================================================= -->
	<!-- ORCHESTRATION LOGIC                                               -->
	<!-- Set of activities coordinating the flow of messages across the    -->
	<!-- services integrated within this business process                  -->
	<!-- ================================================================= -->
	<sequence name="main">
		<!-- Receive input from requester.
             Note: This maps to operation defined in InstanceManager.wsdl
             -->
		<!-- Generate reply to synchronous request -->
		<pick createInstance="yes">
			<onMessage partnerLink="client" portType="tns:InstanceManager" operation="lookupInstance" variable="lookupInstanceRequest">
				<sequence>
					<bpelx:exec xmlns:bpelx="http://schemas.oracle.com/bpel/extension" language="java" version="1.4">
						<![CDATA[
							try
							{
					            Element  referenceId =
					                (Element)getVariableData("lookupInstanceRequest","parameters","/tns:instanceReference/tns:referenceId");
					             // Lookup the instance.

					            Locator locator = getLocator( );
					            
        						// Lookup the specific instance the user has selected.
        						IInstanceHandle instanceHandle =
            						locator.lookupInstance( referenceId.getNodeValue() );

						        Instance instance = InstanceFactory.createFacade();

						        instance.setReferenceId( referenceId.getNodeValue() );
						        instance.setProcessId( instanceHandle.getProcess().getProcessId().getProcessId() );
						        instance.setCreator( instanceHandle.getCreator() );
						        instance.setTitle( instanceHandle.getTitle() );
						        instance.setStatus( instanceHandle.getStatus() );
						        instance.setMetadata( instanceHandle.getMetadata() );
						        instance.setPriority( instanceHandle.getPriority() );
						        instance.setCreationDate( instanceHandle.getCreationDate() );
						        instance.setModifyDate( instanceHandle.getModifyDate() );
						        instance.setComplete( instanceHandle.isComplete() );
						        instance.setOpen( instanceHandle.isOpen() );
						        instance.setFaulted( instanceHandle.isFaulted() );
						        instance.setFaulted( instanceHandle.isCancelled() );
						        instance.setStale( instanceHandle.isStale() );

						        setVariableData("lookupInstanceResponse","parameters",instance.getRootElement() );
					        }
					        catch( Exception e )
					        {
					            e.printStackTrace();
					            addAuditTrailEntry(e);
					        }
    	  ]]>
					</bpelx:exec>
					<reply name="replyOutput" partnerLink="client" portType="tns:InstanceManager" operation="lookupInstance" variable="lookupInstanceResponse"/>
				</sequence>
			</onMessage>
			<onMessage partnerLink="client" portType="tns:InstanceManager" operation="listInstances" variable="listInstancesRequest">
				<sequence>
					<bpelx:exec xmlns:bpelx="http://schemas.oracle.com/bpel/extension" language="java" version="1.4">
						<![CDATA[
							try
							{
					            Element  element =
					                (Element)getVariableData("listInstancesRequest","parameters","/tns:whereCondition");
					                 	// Lookup the instance.
					            IWhereCondition whereCondition = WhereConditionFactory.createFacade( element );

					            Locator locator = getLocator( );
					            
								boolean first = true;

								WhereCondition where = new WhereCondition();

								if(whereCondition.getProcessId() != null && !"".equals( whereCondition.getProcessId()) )
								{
									WhereCondition whereProcessId = new WhereCondition( SQLDefs.AL_ci_process_id + " = '" + whereCondition.getProcessId() + "'" );

									where.append( whereProcessId );

									first = true;
								}


								if(whereCondition.getCreator() != null && !"".equals( whereCondition.getCreator() ) )
								{
									WhereCondition whereCreator = new WhereCondition( "creator = '" + whereCondition.getCreator() + "'" );

									if(first)
										where.append( whereCreator);
									else
										where.append("and").append( whereCreator);

									first = false;
								}

								if(whereCondition.getTitle() != null && !"".equals( whereCondition.getTitle() ) )
								{
									WhereCondition whereTitle = new WhereCondition( "title = '" + whereCondition.getTitle() + "'" );

									if(first)
										where.append( whereTitle);
									else
										where.append("and").append( whereTitle);

									first = false;
								}

								if(whereCondition.getStatus() != null && !"".equals( whereCondition.getStatus() ) )
								{
									WhereCondition whereStatus = new WhereCondition( "status = '" + whereCondition.getStatus() + "'" );

									if(first)
										where.append( whereStatus);
									else
										where.append("and").append( whereStatus);

									first = false;
								}

								try
								{
									if(whereCondition.getPriority() > 0  )
									{
										WhereCondition wherePriority = new WhereCondition( "priority = " + whereCondition.getPriority() );

										if(first)
											where.append( wherePriority);
										else
											where.append("and").append( wherePriority);

										first = false;
									}
								}
								catch(java.util.NoSuchElementException ne)
								{
								}
        						// Lookup the specific instance the user has selected.
        						IInstanceHandle[] instanceHandles =
            						locator.listInstances( where );

						        Instancelist instancelist = InstancelistFactory.createFacade();

						 	    for(int i = 0; i < instanceHandles.length; i ++ )
						 	    {
							        IInstanceHandle instanceHandle = instanceHandles[ i ];
							        Instance instance = InstanceFactory.createFacade();

							        instance.setReferenceId( instanceHandle.getReferenceId().toString() );
							        instance.setProcessId( instanceHandle.getProcess().getProcessId().getProcessId() );
							        instance.setCreator( instanceHandle.getCreator() );
							        instance.setTitle( instanceHandle.getTitle() );
							        instance.setStatus( instanceHandle.getStatus() );
							        instance.setMetadata( instanceHandle.getMetadata() );
							        instance.setPriority( instanceHandle.getPriority() );
							        instance.setCreationDate( instanceHandle.getCreationDate() );
							        instance.setModifyDate( instanceHandle.getModifyDate() );
							        instance.setComplete( instanceHandle.isComplete() );
							        instance.setOpen( instanceHandle.isOpen() );
							        instance.setFaulted( instanceHandle.isFaulted() );
							        instance.setFaulted( instanceHandle.isCancelled() );
							        instance.setStale( instanceHandle.isStale() );

							        instancelist.addInstance( instance );
							    }



						        setVariableData("listInstancesResponse","parameters",instancelist.getRootElement() );
					        }
					        catch( Exception e )
					        {
					            e.printStackTrace();
					            addAuditTrailEntry(e);
					        }
    	  ]]>
					</bpelx:exec>
					<reply partnerLink="client" portType="tns:InstanceManager" operation="listInstances" variable="listInstancesResponse"/>
				</sequence>
			</onMessage>
			<onMessage partnerLink="client" portType="tns:InstanceManager" operation="getResult" variable="getResultRequest">
				<sequence>
					<bpelx:exec xmlns:bpelx="http://schemas.oracle.com/bpel/extension" language="java" version="1.4">
						<![CDATA[
							try
							{
					            Element  referenceId =
					                (Element)getVariableData("getResultRequest","parameters","/tns:instanceReference/tns:referenceId");
					             // Lookup the instance.

					            Locator locator = getLocator( );

        						// Lookup the specific instance the user has selected.
        						IInstanceHandle instanceHandle =
            						locator.lookupInstance( referenceId.getNodeValue() );


						        if( instanceHandle.isComplete() )
						        {
							    Element  result =
							                (Element)getVariableData("getResultResponse","parameters","/tns:instanceResult");

							    InstanceResult instanceResult = InstanceResultFactory.createFacade( result );

						            Object res = instanceHandle.getResult();

						            if(  res.getClass().isArray() )
						            {
						            	Object[] resArray = (Object[])res;

						            	if(resArray.length == 0)
						            		return;
						            	else
						            	{
						            	    for(int i = 0; i < resArray.length; i++)
						            	    {
						            		res = resArray[i];
									if(res instanceof Element)
										instanceResult.addPart( res );
									else
										instanceResult.addPart( res.toString() );
						            	    }
						            	}
						            }
						            else
						            {
						            	if(res instanceof Element)
						            		instanceResult.addPart( res );
						            	else
									instanceResult.addPart( res.toString() );
							    }


							    setVariableData("getResultResponse","parameters",instanceResult.getRootElement() );

							}

					        }
					        catch( Exception e )
					        {
					            e.printStackTrace();
					            addAuditTrailEntry(e);
					        }
    	  ]]>
					</bpelx:exec>
					<reply partnerLink="client" portType="tns:InstanceManager" operation="getResult" variable="getResultResponse"/>
				</sequence>
			</onMessage>
		</pick>
	</sequence>
</process>
